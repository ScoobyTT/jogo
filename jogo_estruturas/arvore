#include <iostream>
using namespace std;

// Estrutura do jogador
struct jogador {
    string nome;
    int score;
    int vida;
};

// N칩 da lista ligada de falas
struct lista {
    string texto;
    lista* prox;
};

// N칩 da 치rvore
struct nodo {
    lista* falas;
    nodo* op1;
    nodo* op2;

    nodo(): falas(nullptr), op1(nullptr), op2(nullptr) {}
};

// Classe da 치rvore
class arvore {
private:
    nodo* raiz;

    void adicionarTexto(nodo* no, const string& texto) {
        lista* nova = new lista{texto, nullptr};
        if (!no->falas) {
            no->falas = nova;
        } else {
            lista* aux = no->falas;
            while (aux->prox) aux = aux->prox;
            aux->prox = nova;
        }
    }

    void mostrarFalas(lista* l) {
        while (l) {
            cout << "- " << l->texto << endl;
            l = l->prox;
        }
    }

    void mostrarArvore(nodo* no, int nivel = 0) {
        if (!no) return;

        mostrarArvore(no->op2, nivel + 1);

        for (int i = 0; i < nivel; ++i) cout << "  ";
        cout << "Cena:\n";
        mostrarFalas(no->falas);

        mostrarArvore(no->op1, nivel + 1);
    }

    void liberar(nodo* no) {
        if (!no) return;
        liberar(no->op1);
        liberar(no->op2);
        lista* l = no->falas;
        while (l) {
            lista* temp = l;
            l = l->prox;
            delete temp;
        }
        delete no;
    }

public:
    arvore(): raiz(nullptr) {}

    nodo* getRaiz() { return raiz; }

    nodo* criarCena(const string& texto) {
        nodo* nova = new nodo;
        adicionarTexto(nova, texto);
        if (!raiz) raiz = nova;
        return nova;
    }

    void adicionarCena(nodo* pai, int opcao, const string& texto) {
        nodo* nova = new nodo;
        adicionarTexto(nova, texto);
        if (opcao == 1) pai->op1 = nova;
        else if (opcao == 2) pai->op2 = nova;
    }

    void mostrar() {
        mostrarArvore(raiz);
    }

    ~arvore() {
        liberar(raiz);
    }
};
